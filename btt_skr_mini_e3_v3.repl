//
// BTT SKR Mini E3 v3.0 - STM32G0B1RET6 grblHAL CNC Controller
// Based on STM32G0 platform with correct memory sizes for STM32G0B1RET6
//

// Main Flash memory - 512KB for STM32G0B1RET6
flash: Memory.MappedMemory @ sysbus 0x08000000
    size: 0x80000

// SRAM - 144KB for STM32G0B1RET6
ram: Memory.MappedMemory @ sysbus 0x20000000
    size: 0x24000

nvic: IRQControllers.NVIC @ sysbus 0xE000E000
    priorityMask: 0xF0
    systickFrequency: 64000000  // 64MHz system clock
    IRQ -> cpu@0

// EXTI for GPIO interrupts (limit switches, control signals)
exti: IRQControllers.STM32F4_EXTI @ sysbus 0x40021800
    numberOfOutputLines: 34
    firstDirectLine: 19
    [0, 1] -> nvicInput5@[0, 1]      // PC0, PC1 - X,Y limits
    [2, 3] -> nvicInput6@[0, 1]      // PC2, PC3 - Z limit, safety door
    [4-15] -> nvicInput7@[0-11]      // PC12-PC15 - Control signals
    [23] -> nvic@[23]
    [32, 33] -> nvicInput8@[0, 1]
    [17, 18] -> nvicInput12@[0, 1]

// NVIC input combiners
nvicInput8: Miscellaneous.CombinedInput @ none
    numberOfInputs: 2
    -> nvic@8

nvicInput10: Miscellaneous.CombinedInput @ none
    numberOfInputs: 2
    -> nvic@10

nvicInput11: Miscellaneous.CombinedInput @ none
    numberOfInputs: 9
    -> nvic@11

nvicInput12: Miscellaneous.CombinedInput @ none
    numberOfInputs: 2
    -> nvic@12

nvicInput5: Miscellaneous.CombinedInput @ none
    numberOfInputs: 2
    -> nvic@5

nvicInput6: Miscellaneous.CombinedInput @ none
    numberOfInputs: 2
    -> nvic@6

nvicInput7: Miscellaneous.CombinedInput @ none
    numberOfInputs: 12
    -> nvic@7

nvicInput29: Miscellaneous.CombinedInput @ none
    numberOfInputs: 4
    -> nvic@29

cpu: CPU.CortexM @ sysbus
    cpuType: "cortex-m0"  // Use cortex-m0 (closest match for M0+)
    nvic: nvic

// USART1 - Primary serial communication (PA9/PA10)
usart1: UART.STM32F7_USART @ sysbus 0x40013800
    frequency: 64000000  // 64MHz APB2 clock
    IRQ -> nvic@27

// USART2 - Trinamic UART (PC10/PC11)  
usart2: UART.STM32F7_USART @ sysbus 0x40004400
    frequency: 64000000  // 64MHz APB1 clock
    IRQ -> nvic@28

// GPIO Ports - BTT SKR Mini E3 v3.0 pin assignments
gpioPortA: GPIOPort.STM32_GPIOPort @ sysbus <0x50000000, +0x400>
    modeResetValue: 0xEBFFFFFF
    pullUpPullDownResetValue: 0x24000000
    numberOfAFs: 8
    [0-15] -> exti@[0-15]

gpioPortB: GPIOPort.STM32_GPIOPort @ sysbus <0x50000400, +0x400>
    modeResetValue: 0xFFFFFFFF
    pullUpPullDownResetValue: 0x00000000
    numberOfAFs: 8
    [0-15] -> exti@[0-15]

gpioPortC: GPIOPort.STM32_GPIOPort @ sysbus <0x50000800, +0x400>
    modeResetValue: 0xFFFFFFFF
    pullUpPullDownResetValue: 0x00000000
    numberOfAFs: 8
    [0-15] -> exti@[0-15]

gpioPortD: GPIOPort.STM32_GPIOPort @ sysbus <0x50000C00, +0x400>
    modeResetValue: 0xFFFFFFFF
    pullUpPullDownResetValue: 0x00000000
    numberOfAFs: 8
    [0-15] -> exti@[0-15]

gpioPortF: GPIOPort.STM32_GPIOPort @ sysbus <0x50001400, +0x400>
    modeResetValue: 0xFFFFFFFF
    pullUpPullDownResetValue: 0x00000000
    numberOfAFs: 8
    [0-15] -> exti@[0-15]

// I2C1 - EXP1 connector (PB8/PB9)
i2c1: I2C.STM32F7_I2C @ sysbus 0x40005400
    EventInterrupt -> exti@23

// SPI1 - SD card interface (PA5/PA6/PA7)
spi1: SPI.STM32SPI @ sysbus 0x40013000
    IRQ -> nvic@25

// Timers for stepper control and spindle PWM
timer2: Timers.STM32_Timer @ sysbus 0x40000000
    frequency: 64000000  // 64MHz for precise PWM
    initialLimit: 0xFFFFFFFF
    -> nvic@15

timer3: Timers.STM32_Timer @ sysbus 0x40000400
    frequency: 64000000  // 64MHz for precise stepper timing
    initialLimit: 0xFFFF
    -> nvic@16

// Other essential timers
timer1: Timers.STM32_Timer @ sysbus 0x40012C00
    frequency: 64000000
    initialLimit: 0xFFFF
    -> nvic@14

timer6: Timers.STM32_Timer @ sysbus 0x40001000
    frequency: 64000000
    initialLimit: 0xFFFF

timer7: Timers.STM32_Timer @ sysbus 0x40001400
    frequency: 64000000
    initialLimit: 0xFFFF
    -> nvic@18

// Independent Watchdog
iwdg: Timers.STM32_IndependentWatchdog @ sysbus 0x40003000
    frequency: 32000

// Flash controller
flash_ctrl: MTD.STM32F4_FlashController @ sysbus 0x40022000
    flash: flash

// RCC - Reset and Clock Control
rcc: Python.PythonPeripheral @ sysbus 0x40021000
    size: 0x400
    initable: true
    script: '''
if request.isInit:
   lastVal = 0
   data = {'hsion': 1, 'pllon': 1, 'sw': 2, 'lsion': 0}  # PLL enabled, HSI->PLL selected
self.NoisyLog("%s on RCC at offset 0x%x, value 0x%x, length %d, %s" % (str(request.type), request.offset, request.value, request.length, str(data)))

if request.isWrite:
    if request.offset == 0x0:
        # HSION and PLLON
        data['hsion'] = (request.value >> 8) & 0x1
        data['pllon'] = (request.value >> 24) & 0x1
    elif request.offset == 0x8:
        # System clock switch
        data['sw'] = request.value & 0x7
    elif request.offset == 0x60:
        data['lsion'] = request.value & 0x1
elif request.isRead:
    if request.offset == 0x0:
        # RCC_CR - HSI ready, PLL ready
        request.value = (data['hsion'] << 8) | (data['hsion'] << 10) | (data['pllon'] << 24) | (data['pllon'] << 25)
    elif request.offset == 0x8:
        # RCC_CFGR - System clock switch status
        request.value = data['sw'] << 3  # SWS bits reflect SW
    elif request.offset == 0x60:
        request.value = (data['lsion'] << 1)
    else:
        request.value = 0x0

self.NoisyLog("  RCC: 0x%x (%s)" % (request.value, str(data)))
'''

// DMA controllers
dma1: DMA.STM32G0DMA @ sysbus 0x40020000
    numberOfChannels: 7
    0 -> nvic@9
    [1, 2] -> nvicInput10@[0, 1]
    [3-6] -> nvicInput11@[0-3]

// System bus tags for unimplemented peripherals
sysbus:
    init:
        Tag <0x40002C00, 0x40002FFF> "WWDG"
        Tag <0x40005C00, 0x40005FFF> "USB"
        Tag <0x40006C00, 0x40006FFF> "CRS"
        Tag <0x40007000, 0x400073FF> "PWR"
        Tag <0x40007400, 0x400077FF> "DAC"
        Tag <0x40010000, 0x400103FF> "SYSCFG"
        Tag <0x40015800, 0x40015BFF> "DBG"
        Tag <0x40023000, 0x400233FF> "CRC"

// BTT SKR Mini E3 v3.0 specific peripherals simulation
bttstepperx: Miscellaneous.LED @ gpioPortB 13  // X Step (PB13)
    invert: true

bttstepper_y: Miscellaneous.LED @ gpioPortB 10  // Y Step (PB10)
    invert: true

bttstepperz: Miscellaneous.LED @ gpioPortB 0   // Z Step (PB0)  
    invert: true

bttspindleen: Miscellaneous.LED @ gpioPortC 6   // Spindle Enable (PC6)
    invert: false

bttspindlepwm: Miscellaneous.LED @ gpioPortA 1  // Spindle PWM (PA1)
    invert: false