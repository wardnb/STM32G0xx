# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32G0xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags, common.lib_deps and common.lib_extra_dirs
# below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e BTT_SKR_MINI_E3_V30
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e BTT_SKR_MINI_E3_V30 -t upload
#    # Clean up build related resources
#    pio run -t clean
#

#
# NOTE: PlatformIO support is provided by the community and platformio.ini is
# not maintained or tested by the repo owner.
# Please submit a PR with bug fixes and enhancments.
#

[platformio]
include_dir = Inc
build_dir = .pio/build

[common]
build_flags =
  -I .
  -I grbl
  -I FatFs
  -I Drivers/CMSIS/Include
  -I Drivers/CMSIS/Device/ST/STM32G0xx/Include
  -I Drivers/STM32G0xx_HAL_Driver/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I USB_DEVICE/App
  -I USB_DEVICE/Target
  # Ignore all settings in Inc/my_machine.h (configure all settings here)
  -D OVERRIDE_MY_MACHINE
  -D STM32G0B1xx
  -D USE_HAL_DRIVER
  # Uncomment to enable debug build
  # -D DEBUG
lib_deps =
src_dir = Src
src_filter = 
  +<*>
  +<../Startup/*.s>
lib_extra_dirs = 
  .
  grbl
  keypad
  motors
  trinamic
  odometer
  eeprom
  sdcard
  spindle
  fans
  encoder
  plasma
  laser
# "framework = stm32cube" is mandatory for STM32G0xx series
platform = ststm32@~17.0.0
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off

[env:BTT_SKR_MINI_E3_V30]
platform = ${common.platform}
board = nucleo_g0b1re
board_build.ldscript = STM32G0B1RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D STM32G0B1xx
  -D USE_HAL_DRIVER
  -D BOARD_BTT_SKR_MINI_E3_V30=
  -D USB_SERIAL_CDC=0
  # Relocate the vector table where the boot loader expects to find them
  -D VECT_TAB_OFFSET=0x8000
  -Wl,--defsym=LD_VECT_TAB_OFFSET=0x8000
  # Enable control inputs (Reset, Feed Hold, Cycle Start)
  -D CONTROL_ENABLE=0x07
  # Enable safety door
  -D SAFETY_DOOR_ENABLE=1
  # Enable spindle plugin (advanced spindle control)
  -D SPINDLE_PLUGIN_ENABLE=1
  # Enable fans plugin (M106/M107 fan control)
  -D FANS_ENABLE=1
  # Enable encoder plugin (closed-loop feedback)
  -D ENCODER_ENABLE=1
  # Enable plasma plugin (THC support)
  -D PLASMA_ENABLE=1
  # Enable laser plugin (laser-specific features)
  -D LASER_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
  trinamic
lib_extra_dirs = ${common.lib_extra_dirs}
# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card.

[env:BTT_SKR_MINI_E3_V30_USB]
platform = ${common.platform}
board = nucleo_g0b1re
board_build.ldscript = STM32G0B1RETX_FLASH.ld
build_flags = ${common.build_flags}
  # See Inc/my_machine.h for options
  -D STM32G0B1xx
  -D USE_HAL_DRIVER
  -D BOARD_BTT_SKR_MINI_E3_V30=
  -D USB_SERIAL_CDC=1
  # Relocate the vector table where the boot loader expects to find them
  -D VECT_TAB_OFFSET=0x8000
  -Wl,--defsym=LD_VECT_TAB_OFFSET=0x8000
  # Enable control inputs (Reset, Feed Hold, Cycle Start)
  -D CONTROL_ENABLE=0x07
  # Enable safety door
  -D SAFETY_DOOR_ENABLE=1
  # Enable spindle plugin (advanced spindle control)
  -D SPINDLE_PLUGIN_ENABLE=1
  # Enable fans plugin (M106/M107 fan control)
  -D FANS_ENABLE=1
  # Enable encoder plugin (closed-loop feedback)
  -D ENCODER_ENABLE=1
  # Enable plasma plugin (THC support)
  -D PLASMA_ENABLE=1
  # Enable laser plugin (laser-specific features)
  -D LASER_ENABLE=1
lib_deps = ${common.lib_deps}
  eeprom
  trinamic
lib_extra_dirs = ${common.lib_extra_dirs}
# Upload is not supported for this board since BOOT0 is tied to GND.
# With the default boot loader, you must deploy new firmware by copying
# .pio/build/<env name>/firmware.bin (produced by `pio run`) to the SD card. 
